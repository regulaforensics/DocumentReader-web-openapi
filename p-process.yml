openapi: 3.0.1

paths:
  /process:
    post:
      summary: Process list of documents images and return extracted data
      operationId: api-process
      tags:
        - process
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessRequest"
        required: true
      responses:
        "200":
          description: "Document reading result"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: "Bad request. Check your input data."
        "403":
          description: "Bad license. Either server or request does not contain valid license."
      x-codeSamples:
        - lang: 'JavaScript'
          source: |
            import {DocumentReaderApi, FieldType, GraphicFieldType} from '@regulaforensics/document-reader-webclient/esm'
            const {DOCUMENT_NUMBER, SURNAME_AND_GIVEN_NAMES, DATE_OF_BIRTH} = FieldType;
            const {PORTRAIT, SIGNATURE} = GraphicFieldType;

            const imageAsBase64String = getDocImageAsBase64String()
            const api = new DocumentReaderApi({basePath: "http://localhost:8080"});
            const result = await api.process(imageAsBase64String)

            // text fields
            const docNumber = result.getTextField(DOCUMENT_NUMBER)
            const fullName = result.getTextField(SURNAME_AND_GIVEN_NAMES)
            const dateOfBirth = result.getTextField(DATE_OF_BIRTH)

            // graphics fields
            const portraitAsBase64 = result.getGraphicsField(PORTRAIT)
            const signatureAsBase64 = result.getGraphicsField(SIGNATURE)
        - lang: 'Java'
          source: |
            byte[] imageBytes = readFile("australia_passport.jpg");
            var image = new ProcessRequestImage(imageBytes, Light.WHITE);

            var requestParams = new RecognitionParams()
                    .withScenario(Scenario.FULL_PROCESS)
                    .withResultTypeOutput(Result.STATUS, Result.TEXT, Result.IMAGES);

            RecognitionRequest request = new RecognitionRequest(requestParams, List.of(image));

            var api = new DocumentReaderApi();
            RecognitionResponse response = api.process(request);

            var status = response.status();
            var docOverallStatus = status.getComplete() == CheckResult.OK ? "valid" : "not valid";
            var docOpticalTextStatus = status.getDetailsOptical().getText();

            var docNumberField = response.text().getField(DOCUMENT_NUMBER);
            var docNumberMrz = docNumberField.getValue(Source.MRZ);
            var docNumberMrzValidity = docNumberField.sourceValidity(Source.MRZ);
            var docNumberMrzVisualMatching = docNumberField.crossSourceComparison(Source.MRZ, Source.VISUAL);
        - lang: 'Python'
          source: |
            from regula.documentreader.webclient import *

            with open("australia_passport.jpg", "rb") as f:
              input_image = f.read()

            with DocumentReaderApi(host='http://localhost:8080') as api:
              params = ProcessParams(
              scenario=Scenario.FULL_PROCESS,
              result_type_output=[Result.DOCUMENT_IMAGE, Result.STATUS, Result.TEXT, Result.IMAGES]
              )
              request = RecognitionRequest(process_params=params, images=[input_image])
              response = api.process(request)

            # status examples
            response_status = response.status
            doc_overall_status = "valid" if response_status.overall_status == CheckResult.OK else "not valid"

            # text fields example
            doc_number_field = response.text.get_field(TextFieldType.DOCUMENT_NUMBER)
            doc_number_mrz = doc_number_field.get_value()
            doc_number_visual = doc_number_field.get_value(Source.VISUAL)
            doc_number_visual_validity = doc_number_field.source_validity(Source.VISUAL)
            doc_number_mrz_validity = doc_number_field.source_validity(Source.MRZ)
            doc_number_mrz_visual_matching = doc_number_field.cross_source_comparison(Source.MRZ, Source.VISUAL)

            # images fields example
            normalized_input_image = response.images.document_image()
            portrait_field = response.images.get_field(GraphicFieldType.PORTRAIT)
            portrait_from_visual = portrait_field.get_value(Source.VISUAL)
            portrait_from_rfid = portrait_field.get_value(Source.RFID, original=True)
        - lang: 'C#'
          source: |
            var imageBytes = File.ReadAllBytes("australia_passport.jpg");
            var image = new ProcessRequestImage(new ImageData(imageBytes), Light.WHITE);

            var requestParams = new RecognitionParams()
            .WithScenario(Scenario.FULL_PROCESS)
            .WithResultTypeOutput(new List<int> { Result.STATUS, Result.TEXT, Result.IMAGES, Result.DOCUMENT_TYPE });
            var request = new RecognitionRequest(requestParams, image);

            var api = licenseFromEnv != null
               ? new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromEnv)
               : new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromFile);
            var response = api.Process(request);

            // status examples
            var status = response.Status();
            string docOverallStatus = status.OverallStatus == CheckResult.OK ? "valid" : "not valid";
            string docOpticalTextStatus = status.DetailsOptical.Text == CheckResult.OK ? "valid" : "not valid";

            // text fields examples
            var docNumberField = response.Text().GetField(TextFieldType.DOCUMENT_NUMBER);
            string docNumberVisual = docNumberField.GetValue(Source.VISUAL);
            string docNumberMrz = docNumberField.GetValue(Source.MRZ);
            int docNumberVisualValidity = docNumberField.SourceValidity(Source.VISUAL);
            int docNumberMrzValidity = docNumberField.SourceValidity(Source.MRZ);
            int docNumberMrzVisualMatching = docNumberField.CrossSourceComparison(Source.MRZ, Source.VISUAL);

            // images fields examples
            var documentImage = response.Images().GetField(GraphicFieldType.DOCUMENT_FRONT).GetValue();
            var portraitField = response.Images().GetField(GraphicFieldType.PORTRAIT);
            var portraitFromVisual = portraitField.GetValue(Source.VISUAL);


components:
  schemas:

    #############################
    ############################# Requests objects

    # todo different image input types
    ProcessRequest:
      type: object
      properties:
        processParam:
          $ref: '#/components/schemas/ProcessParams'
        List:
          type: array
          items:
            $ref: '#/components/schemas/ProcessRequestImage'
        systemInfo:
          $ref: '#/components/schemas/ProcessSystemInfo'
        passBackObject:
          type: object
          description: "Free-form object to be included in response. Must be object, not list or simple value.
          Do not affect document processing. Use it freely to pass your app params. Stored in process logs."
          additionalProperties: true
      required:
        - processParam
        - List

    ProcessParams:
      type: object
      properties:
        scenario:
          $ref: './common.yml#/components/schemas/Scenario'
        resultTypeOutput:
          description: "Types of results to return in response. See 'Result' enum for available options"
          type: array
          items:
            $ref: './rt.yml#/components/schemas/Result'
        doublePageSpread:
          description: "This option can be set to true if the image you provide contains double page spread
          of the passport and you want to process both pages in one go. It makes sense to use it for documents
          that have meaningful information on both pages, like Russian domestic passport, or some others.
          By default is set to false."
          type: boolean
        fieldTypesFilter:
          description: "List of text field types to extract. If empty, all text fields from template will be extracted.
          Narrowing the list can shorten processing time. By default is empty."
          type: array
          items:
            $ref: './e-text-field-type.yml#/components/schemas/TextFieldType'
        dateFormat:
          description: "This option allows you to set dates format so that solution will return dates in this format.
          For example, if you supply 'MM/dd/yyyy', and document have printed date '09 JUL 2020' for the date os issue,
          you will get '07/09/2020' as a result.
          By default it is set to system locale default (where the service is running)."
          type: string
          example: "MM/dd/yyyy"
        imageDpiOutMax:
          description: "This option controls maximum resolution in dpi of output images. Resolution will remain original
          in case 0 is supplied. By default is set to return images in response with resolution not greater than 300 dpi."
          type: integer
        alreadyCropped:
          description: "This option can be set to true if you know for sure that the image you provide contains
          already cropped document by its edges. This was designed to process on the
          server side images captured and cropped on mobile. By default is set to false."
          type: boolean
        customParams:
          description: "This option allows to pass custom processing parameters that can be implemented in future without
          changing API."
          type: object
          additionalProperties: true
        log:
          description: "This option can be set to true if you need to get base64 string of transaction processing log."
          type: boolean
        forceDocID:
          description: "Force use of specific template ID and skip document type identification step."
          type: integer
        matchTextFieldMask:
          description: "When disabled, text field OCR will be done as is and then the recognized value will be
          matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts
          to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask
          in the template."
          type: boolean
          default: true
        fastDocDetect:
          description: "When enabled, shorten the list of candidates to process during document detection in a
          single image process mode. Reduces processing time for specific backgrounds."
          type: boolean
          default: true
        updateOCRValidityByGlare:
          description: "When enabled, fail OCR field validity, if there is a glare over the text field on the image."
          type: boolean
          default: false
        generateDoublePageSpreadImage:
          description: 'When enabled together with "doublePageSpread" and there is a passport with two pages
          spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured
          on a flatbed scanner.'
          type: boolean
        checkRequiredTextFields:
          description: 'When enabled, each field in template will be checked for value presence and if the field
          is marked as required, but has no value, it will have "error" in validity status.'
          type: boolean
          default: false
        imageQA:
          $ref: '#/components/schemas/ImageQA'
      required:
        - scenario

    ImageQA:
      type: object
      properties:
        dpiThreshold:
          description: "This parameter sets threshold for Image QA check of the presented document physical dpi. If
          actual document dpi is below this threshold, check will fail."
          type: integer
          default: 150
        angleThreshold:
          description: "This parameter sets threshold for Image QA check of the presented document perspective angle in
          degrees. If actual document perspective angle is above this threshold, check will fail."
          type: integer
          default: 5

    ProcessRequestImage:
      type: object
      required:
        - ImageData
      properties:
        ImageData:
          $ref: './common.yml#/components/schemas/ImageData'
        light:
          $ref: './common.yml#/components/schemas/Light'
        page_idx:
          description: "page/image number"
          type: integer
          default: 0
      example:
        light: 6
        page_idx: 0
        ImageData:
          image: "<base64 image>"

    ProcessSystemInfo:
      type: object
      properties:
        license:
          description: "Base64 encoded license file"
          type: string
        recaptcha_token:
          description: "For internal use. Demo-sites recaptcha token."
          type: string

    #############################
    ############################# Response objects
    ProcessResponse:
      type: object
      required:
        - ProcessingFinished
        - ContainerList
        - TransactionInfo
        - ChipPage
      properties:
        ChipPage:
          $ref: "./common.yml#/components/schemas/RfidLocation"
        ProcessingFinished:
          $ref: "#/components/schemas/ProcessingStatus"
        ContainerList:
          $ref: "./rt.yml#/components/schemas/ContainerList"
        TransactionInfo:
          $ref: "#/components/schemas/TransactionInfo"
        log:
          description: "Base64 encoded transaction processing log"
          type: string
        passBackObject:
          type: object
          description: "Free-form object provided in request. See passBackObject property of ProcessRequest."
          additionalProperties: true

    ProcessingStatus:
      type: integer
      enum:
        - 0
        - 1
        - 2
      x-enum-descriptions:
        - 'Processing was not finished'
        - 'Processing finished'
        - 'Processing finished by timeout'
      x-enum-varnames:
        - 'NOT_FINISHED'
        - 'FINISHED'
        - 'TIMEOUT'

    TransactionInfo:
      type: object
      properties:
        ComputerName:
          type: string
        DateTime:
          type: string
        TransactionID:
          type: string
        UserName:
          type: string
      example:
        ComputerName: "7cded6852d20"
        "DateTime": "2020-05-27T08:17:03.247Z"
        "TransactionID": "dc5eb444-ad6e-4ebc-8102-d62d5bb56a4e"
        "UserName": "user"
