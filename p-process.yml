openapi: 3.0.4
paths:
  /process:
    parameters:
      - $ref: "./common.yml#/components/parameters/x-request"
    post:
      summary: Process list of documents images and return extracted data
      operationId: api-process
      tags:
        - process
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessRequest"
        required: true
      responses:
        "200":
          description: "Document reading result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessResponse"
        "400":
          description: "Bad request. Check your input data."
        "403":
          description: "Bad license. Either server or request does not contain valid license."
      x-codeSamples:
        - lang: 'JavaScript'
          source: |
            import {DocumentReaderApi, FieldType, GraphicFieldType} from '@regulaforensics/document-reader-webclient/esm'
            const {DOCUMENT_NUMBER, SURNAME_AND_GIVEN_NAMES, DATE_OF_BIRTH} = FieldType;
            const {PORTRAIT, SIGNATURE} = GraphicFieldType;

            const imageAsBase64String = getDocImageAsBase64String()
            const api = new DocumentReaderApi({basePath: "http://localhost:8080"});
            const result = await api.process(imageAsBase64String)

            // text fields
            const docNumber = result.getTextField(DOCUMENT_NUMBER)
            const fullName = result.getTextField(SURNAME_AND_GIVEN_NAMES)
            const dateOfBirth = result.getTextField(DATE_OF_BIRTH)

            // graphics fields
            const portraitAsBase64 = result.getGraphicsField(PORTRAIT)
            const signatureAsBase64 = result.getGraphicsField(SIGNATURE)
        - lang: 'Java'
          source: |
            byte[] imageBytes = readFile("australia_passport.jpg");
            var image = new ProcessRequestImage(imageBytes, Light.WHITE);

            var requestParams = new RecognitionParams()
                    .withScenario(Scenario.FULL_PROCESS)
                    .withResultTypeOutput(Result.STATUS, Result.TEXT, Result.IMAGES);

            RecognitionRequest request = new RecognitionRequest(requestParams, List.of(image));

            var api = new DocumentReaderApi();
            RecognitionResponse response = api.process(request);

            var status = response.status();
            var docOverallStatus = status.getComplete() == CheckResult.OK ? "valid" : "not valid";
            var docOpticalTextStatus = status.getDetailsOptical().getText();

            var docNumberField = response.text().getField(DOCUMENT_NUMBER);
            var docNumberMrz = docNumberField.getValue(Source.MRZ);
            var docNumberMrzValidity = docNumberField.sourceValidity(Source.MRZ);
            var docNumberMrzVisualMatching = docNumberField.crossSourceComparison(Source.MRZ, Source.VISUAL);
        - lang: 'Python'
          source: |
            from regula.documentreader.webclient import *

            with open("australia_passport.jpg", "rb") as f:
              input_image = f.read()

            with DocumentReaderApi(host='http://localhost:8080') as api:
              params = ProcessParams(
              scenario=Scenario.FULL_PROCESS,
              result_type_output=[Result.DOCUMENT_IMAGE, Result.STATUS, Result.TEXT, Result.IMAGES]
              )
              request = RecognitionRequest(process_params=params, images=[input_image])
              response = api.process(request)

            # status examples
            response_status = response.status
            doc_overall_status = "valid" if response_status.overall_status == CheckResult.OK else "not valid"

            # text fields example
            doc_number_field = response.text.get_field(TextFieldType.DOCUMENT_NUMBER)
            doc_number_mrz = doc_number_field.get_value()
            doc_number_visual = doc_number_field.get_value(Source.VISUAL)
            doc_number_visual_validity = doc_number_field.source_validity(Source.VISUAL)
            doc_number_mrz_validity = doc_number_field.source_validity(Source.MRZ)
            doc_number_mrz_visual_matching = doc_number_field.cross_source_comparison(Source.MRZ, Source.VISUAL)

            # images fields example
            normalized_input_image = response.images.document_image()
            portrait_field = response.images.get_field(GraphicFieldType.PORTRAIT)
            portrait_from_visual = portrait_field.get_value(Source.VISUAL)
            portrait_from_rfid = portrait_field.get_value(Source.RFID, original=True)
        - lang: 'C#'
          source: |
            var imageBytes = File.ReadAllBytes("australia_passport.jpg");
            var image = new ProcessRequestImage(new ImageData(imageBytes), Light.WHITE);

            var requestParams = new RecognitionParams()
            .WithScenario(Scenario.FULL_PROCESS)
            .WithResultTypeOutput(new List<int> { Result.STATUS, Result.TEXT, Result.IMAGES, Result.DOCUMENT_TYPE });
            var request = new RecognitionRequest(requestParams, image);

            var api = licenseFromEnv != null
               ? new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromEnv)
               : new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromFile);
            var response = api.Process(request);

            // status examples
            var status = response.Status();
            string docOverallStatus = status.OverallStatus == CheckResult.OK ? "valid" : "not valid";
            string docOpticalTextStatus = status.DetailsOptical.Text == CheckResult.OK ? "valid" : "not valid";

            // text fields examples
            var docNumberField = response.Text().GetField(TextFieldType.DOCUMENT_NUMBER);
            string docNumberVisual = docNumberField.GetValue(Source.VISUAL);
            string docNumberMrz = docNumberField.GetValue(Source.MRZ);
            int docNumberVisualValidity = docNumberField.SourceValidity(Source.VISUAL);
            int docNumberMrzValidity = docNumberField.SourceValidity(Source.MRZ);
            int docNumberMrzVisualMatching = docNumberField.CrossSourceComparison(Source.MRZ, Source.VISUAL);

            // images fields examples
            var documentImage = response.Images().GetField(GraphicFieldType.DOCUMENT_FRONT).GetValue();
            var portraitField = response.Images().GetField(GraphicFieldType.PORTRAIT);
            var portraitFromVisual = portraitField.GetValue(Source.VISUAL);


components:
  schemas:
    #############################
    ############################# Requests objects
    ProcessRequest:
      title: "ProcessRequest"
      type: object
      required:
        - processParam
      properties:
        processParam:
          $ref: "#/components/schemas/ProcessParams"
        List:
          type: array
          items:
            $ref: "#/components/schemas/ProcessRequestImage"
        tag:
          type: string
          description: "Session ID"
        tenant:
          type: string
          description: "Customer name"
        env:
          type: string
          description: "Environment type"
        livePortrait:
          type: string
          format: base64
          example: "Base64 encoded data"
          description: "Live portrait photo"
        extPortrait:
          type: string
          format: base64
          example: "Base64 encoded data"
          description: "Portrait photo from an external source"
        ContainerList:
          $ref: "./rt.yml#/components/schemas/ContainerList"
        systemInfo:
          $ref: "#/components/schemas/ProcessSystemInfo"
        passBackObject:
          type: object
          description: "Free-form object to be included in response. Must be object, not list or simple value.
          Do not affect document processing. Use it freely to pass your app params. Stored in process logs."
          additionalProperties: true
        dtc:
          type: string
          description: "Digital Travel Credential (DTC-VC) data in base64 format for processing"
        ImageUrls:
          type: array
          description: "URLs to the document images for processing."
          items:
            type: string

    ProcessParams:
      title: "ProcessParams"
      type: object
      required:
        - scenario
      properties:
        generateDTCVC:
          type: boolean
          description: "This parameter is used to generate separate DTC-VC data container from RFID session data."
        lcidFilter:
          description: "The list of LCID types to recognize. If empty, values with all LCID types will be extracted. Empty by default."
          type: array
          items:
            $ref: "./e-lcid.yml#/components/schemas/LCID"
        checkLiveness:
          description: "This parameter is used to enable document liveness check."
          type: boolean
        lcidIgnoreFilter:
          description: "The list of LCID types to ignore during the recognition. If empty, values with all LCID types will be extracted. Narrowing down the list can reduce processing time. Empty by default."
          type: array
          items:
            $ref: "./e-lcid.yml#/components/schemas/LCID"
        oneShotIdentification:
          type: boolean
          description: "This parameter allows processing an image that contains a person and a document and compare the portrait photo from the document with the person's face"
        useFaceApi:
          type: boolean
          description: "This parameter allows comparing faces on Regula Face Web Service"
        faceApi:
          $ref: "./common.yml#/components/schemas/FaceApi"
        doDetectCan:
          type: boolean
          description: "This parameter allows enabling the CAN (Card Access Number) detection and recognition when using scenarios with document location and MRZ reading, such as the MrzAndLocate scenario."
        imageOutputMaxHeight:
          type: integer
          description: "This parameter allows setting maximum height in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0."
        imageOutputMaxWidth:
          type: integer
          description: "This parameter allows setting maximum width in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0."
        scenario:
          $ref: "./common.yml#/components/schemas/Scenario"
        resultTypeOutput:
          description: "Types of results to return in response. See 'Result' enum for available options"
          type: array
          items:
            $ref: "./rt.yml#/components/schemas/Result"
        doublePageSpread:
          description: "Enable this option if the image you provide contains double page spread
          of the passport and you want to process both pages in one go. It makes sense to use it for documents
          that have meaningful information on both pages, like Russian domestic passport, or some others.
          Disabled by default."
          type: boolean
          deprecated: true
          # default false
        generateDoublePageSpreadImage:
          description: 'When enabled together with "doublePageSpread" and there is a passport with two pages
          spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured
          on a flatbed scanner. Disabled by default.'
          type: boolean
          # default false
        fieldTypesFilter:
          description: "List of text field types to extract. If empty, all text fields from template will be extracted.
          Narrowing the list can shorten processing time. Empty by default."
          type: array
          items:
            $ref: "./e-text-field-type.yml#/components/schemas/TextFieldType"
        dateFormat:
          description: "This option allows you to set dates format so that solution will return dates in this format.
          For example, if you supply 'MM/dd/yyyy', and document have printed date '09 JUL 2020' for the date os issue,
          you will get '07/09/2020' as a result.
          By default it is set to system locale default (where the service is running)."
          type: string
          example: "MM/dd/yyyy"
        measureSystem: # This option allows you to set the system of measurement used for converting original values in document to output result values. Metric by default.
          $ref: "#/components/schemas/MeasureSystem"
        imageDpiOutMax:
          description: "This parameter controls maximum resolution in dpi of output images.
          Resolution will remain original in case 0 is supplied. By default is set to return images in response with
          resolution not greater than 300 dpi for all scenarios except FullAuth. In FullAuth scenario this limit is 1000 dpi by default."
          type: integer
        alreadyCropped:
          description: "This option can be enabled if you know for sure that the image you provide contains
          already cropped document by its edges. This was designed to process on the
          server side images captured and cropped on mobile. Disabled by default."
          type: boolean
          # default false
        customParams:
          description: "This option allows passing custom processing parameters that can be implemented in future without
          changing API."
          type: object
          additionalProperties: true
        config:
          description: "This option allows setting additional custom configuration per document type.
           If recognized document has ID specified in config, processing adjusts according to designated configuration."
          type: array
          items:
            $ref: "#/components/schemas/PerDocumentConfig"
        log:
          description: "When enabled, results will contain transaction processing log. Disabled by default"
          type: boolean
          # default false
        logLevel: # When used together with 'log' parameter enabled, sets the level of logs detalization. 'INFO' by default.
          $ref: "#/components/schemas/LogLevel"
          # default: "INFO"
        forceDocID:
          description: "Force use of specific template ID and skip document type identification step."
          type: integer
        matchTextFieldMask:
          description: "When disabled, text field OCR will be done as is and then the recognized value will be
          matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts
          to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask
          in the template. Enabled by default."
          type: boolean
          # default: true
        fastDocDetect:
          description: "When enabled, shorten the list of candidates to process during document detection in a
          single image process mode. Reduces processing time for specific backgrounds. Enabled by default."
          type: boolean
          deprecated: true
          # default: true
        updateOCRValidityByGlare:
          description: "When enabled, fail OCR field validity, if there is a glare over the text field on the image. Disabled by default."
          type: boolean
          # default: false
        checkRequiredTextFields:
          description: "When enabled, each field in template will be checked for value presence and if the field
          is marked as required, but has no value, it will have 'error' in validity status. Disabled by default."
          type: boolean
          # default: false
        returnCroppedBarcode:
          description: "When enabled, returns cropped barcode images for unknown documents. Disabled by default."
          type: boolean
          # default: false
        imageQa:
          $ref: "#/components/schemas/ImageQA"
        strictImageQuality:
          description: "When enabled, the image quality check status affects the document optical and overall status. Disabled by default."
          type: boolean
          # default: false
        respectImageQuality:
          description: "Deprecated. Please use strictImageQuality instead. When enabled, image quality checks status affects document optical and overall status. Disabled by default."
          type: boolean
          deprecated: true
          # default: false
        forceDocFormat: # Force use of specified document format when locating and recognizing document to reduce the number of candidates.
          $ref: "./rt-doc-type-old.yml#/components/schemas/DocumentFormat"
        noGraphics:
          description: "When enabled, no graphic fields will be cropped from document image. Disabled by default."
          type: boolean
          # default: false
        depersonalizeLog:
          description: "When enabled, all personal data will be forcibly removed from the logs. Disabled by default."
          type: boolean
          # default: false
        multiDocOnImage:
          description: "This option allows locating and cropping multiple documents from one image if enabled. Disabled by default."
          type: boolean
          # default false
        shiftExpiryDate:
          description: "This option allows shifting the date of expiry into the future or past for number of months specified.
          This is useful, for example, in some cases when document might be still valid for some period
          after original expiration date to prevent negative validity status for such documents.
          Or by shifting the date to the past will set negative validity for the documents
          that is about to expire in a specified number of months. 0 by default"
          type: integer
          #default 0
        minimalHolderAge:
          description: "This options allows specifying the minimal age in years of the document holder
          for the document to be considered valid."
          type: integer
        returnUncroppedImage:
          description: "When enabled, returns input images in output. Disabled by default."
          type: boolean
          # default false
        mrzFormatsFilter:
          description: "This option allows limiting MRZ formats to be recognized by specifying them in array."
          type: array
          items:
            $ref: "#/components/schemas/MRZFormat"
        forceReadMrzBeforeLocate:
          description: "When enabled, make sure that in series processing MRZ is located fully inside the result document image, 
          if present on the document. Enabling this option may add extra processing time, by disabling optimizations,
          but allows more stability in output image quality. Disabled by default."
          type: boolean
          # default false
        parseBarcodes:
          description: "This option can be disabled to stop parsing after barcode is read. Enabled by default."
          type: boolean
          # default true
        convertCase: # This option allows output text case transformation. No changes applied by default to original values.
          $ref: "#/components/schemas/TextPostProcessing"
        splitNames:
          description: "When enabled, the Surname and GivenNames fields from MRZ will be divided into
          ft_First_Name, ft_Second_Name, ft_Third_Name, ft_Fourth_Name, ft_Last_Name fields. Disabled by default."
          type: boolean
          # default false
        disablePerforationOCR:
          description: "When enabled, OCR of perforated fields in the document template will not be performed. Disabled by default."
          type: boolean
          # default false
        documentGroupFilter:
          description: "List of specific eligible document types from DocumentType enum to recognize from. 
          You may, for example, specify only passports to be recognized by setting this property. Empty by default."
          type: array
          items:
            $ref: "./e-document-type.yml#/components/schemas/DocumentType"
        processAuth:
          description: "Authenticity checks that should be performed regardless of the document type. The available checks are listed in the eRPRM_Authenticity enum. Note that only supported by your license checks can be added."
          type: integer
          format: int64
        deviceId:
          description: "This parameter is used to specify the document reader device type from which input images were captured. Default 0."
          type: integer
          # default: 0
        deviceType:
          description: "This parameter is used to specify the document reader device type from which input images were captured. Default 0."
          type: integer
          # default: 0
        deviceTypeHex:
          type: string
          description: "This parameter is used to specify the document reader device type from which input images were captured"
        ignoreDeviceIdFromImage:
          type: boolean
          description: "This parameter is used to tell the processing engine to ignore any parameters saved in the image when scanned from the document reader device. Default false"
          # default: false
        documentIdList:
          type: array
          description: "List of the document ID's to process. All documents will be processed, if empty."
          items:
            type: integer
          # default []
        rfid:
          type: object
          description: "Params for the RFID chip data reprocessing"
          properties:
            paIgnoreNotificationCodes:
              description: "A list of notification codes that should be ignored during passive authentication (PA)"
              type: array
              items:
                $ref: "./e-parsing-notification-codes.yml#/components/schemas/ParsingNotificationCodes"
        checkAuth:
          type: boolean
          description: "This parameter is used to enable authenticity checks"
          # default: true
        authParams:
          $ref: '#/components/schemas/AuthParams'
        mrzDetectMode:
          $ref: '#/components/schemas/mrzDetectModeEnum'
        generateNumericCodes:
          type: boolean
          description: "This parameter is used to generate numeric representation for issuing state and nationality codes"
          # default: false
        strictBarcodeDigitalSignatureCheck:
          type: boolean
          description: "This parameter if enabled will require all necessary certificates to verify digital signature in barcode data to be present in order for the Barcode format check to succeed."
          # default: false
        selectLongestNames:
          type: boolean
          description: "Select the longest value from the different value sources and write it to the value field if comparison is done successfully. The parameter applies this logic to the personal names, such as given name, surname, surname and given name, middle name and etc."
          # default: false
        doBarcodes:
          description: "Set the types of barcodes to process."
          type: array
          items:
            $ref: "./e-input-barcode-type.yml#/components/schemas/InputBarcodeType"
        strictDLCategoryExpiry:
          description: "Set to force DL categories expiry date to affect the overall status or not. As documents usually have their own date of expiry, which might be less or greater than category expiry date, this might be handy for specific cases."
          type: boolean
          # default: true
        generateAlpha2Codes:
          description: "Set to generate Alpha-2 codes for nationality and issuing state fields."
          type: boolean
        pdfPagesLimit:
          description: "Limits the number of pages to be processed from a PDF file."
          type: integer
        disableAuthResolutionFilter:
          description: "This parameter if enabled will ignore the minimum barcode resolution needed to start processing."
          type: boolean
          # default: false

    MRZFormat:
      title: "MRZFormat"
      type: string
      enum:
        - "1x30"
        - "3x30"
        - "2x36"
        - "2x44"
        - "1x6"
        - "2x30"
      x-enum-varnames:
        - "IDL"
        - "ID1"
        - "ID2"
        - "ID3"
        - "CAN"
        - "ID1_2_30"
      x-enum-descriptions:
        - "1x30"
        - "3x30"
        - "2x36"
        - "2x44"
        - "1x6"
        - "2x30"

    TextPostProcessing:
      title: "TextPostProcessing"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
      x-enum-varnames:
        - "NO_CHANGE"
        - "UPPERCASE"
        - "LOWERCASE"
        - "CAPITAL"
      x-enum-descriptions:
        - "Do not change"
        - "Uppercase"
        - "Lowercase"
        - "Capital"

    mrzDetectModeEnum:
      title: "mrzDetectModeEnum"
      type: integer
      description: "Make better MRZ detection on complex noisy backgrounds, like BW photocopy of some documents."
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - "eMDM_Default"
        - "eMDM_ResizeBinarizeWindow"
        - "eMDM_BlurBeforeBinarization"

    AuthParams:
      title: "AuthParams"
      type: object
      properties:
        checkLiveness:
          type: boolean
          description: "This parameter is used to enable document liveness check"
          # default: true
        livenessParams:
          $ref: '#/components/schemas/LivenessParams'
        checkUVLuminiscence:
          type: boolean
          description: "This parameter is used to enable Document luminescence check in UV light"
          # default: true
        checkIRB900:
          type: boolean
          description: "This parameter is used to enable B900 ink MRZ contrast check in IR light"
          # default: true
        checkImagePatterns:
          type: boolean
          description: "This parameter is used to enable Image patterns presence/absence check (position, shape, color)"
          # default: true
        checkFibers:
          type: boolean
          description: "This parameter is used to enable Fibers detection"
          # default: true
        checkExtMRZ:
          type: boolean
          description: "This parameter is used to enable Extended MRZ Check"
          # default: true
        checkExtOCR:
          type: boolean
          description: "This parameter is used to enable Extended OCR Check"
          # default: true
        checkAxial:
          type: boolean
          description: "This parameter is used to enable laminate integrity check in axial light"
          # default: true
        checkBarcodeFormat:
          type: boolean
          description: "This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)"
          # default: true
        checkIRVisibility:
          type: boolean
          description: "This parameter is used to enable Document elements visibility check in IR light"
          # default: true
        checkIPI:
          type: boolean
          description: "This parameter is used to enable Invisible Personal Information (IPI) check"
          # default: true
        checkPhotoEmbedding:
          type: boolean
          description: "This parameter is used to enable Owner's photo embedding check (is photo printed or sticked)"
          # default: true
        checkPhotoComparison:
          type: boolean
          description: "This parameter is used to enable Portrait comparison check"
          # default: true
        checkLetterScreen:
          type: boolean
          description: "This parameter is used to enable LetterScreen check"
          # default: false
        checkSecurityText:
          type: boolean
          description: "This parameter is used to enable Security text check"
          # default: true

    LivenessParams:
      title: "LivenessParams"
      type: object
      properties:
        checkOVI:
          type: boolean
          description: "This parameter is used to enable OVI check"
          # default: true
        checkMLI:
          type: boolean
          description: "This parameter is used to enable MLI check"
          # default: true
        checkHolo:
          type: boolean
          description: "This parameter is used to enable Hologram detection"
          # default: true
        checkED:
          type: boolean
          description: "This parameter is used to enable Electronic device detection"
          # default: true
        checkBlackAndWhiteCopy:
          type: boolean
          description: "This parameter is used to enable Black and white copy check"
          # default: true
        checkDynaprint:
          type: boolean
          description: "This parameter is used to enable Dynaprint check"
          # default: true
        checkGeometry:
          type: boolean
          description: "This parameter is used to enable Geometry check"
          # default: true

    MeasureSystem:
      title: "MeasureSystem"
      type: integer
      example: 0
      enum:
        - 0
        - 1
      x-enum-descriptions:
        - "Metric system of measurement, where things are measured in meters and grams"
        - "Imperial System of Measurement, where things are measured in feet, inches and pounds"
      x-enum-varnames:
        - "METRIC"
        - "IMPERIAL"

    LogLevel:
      title: "LogLevel"
      type: string
      enum:
        - FatalError
        - Error
        - Warning
        - Info
        - Debug
      x-enum-varnames:
        - "FATAL_ERROR"
        - "ERROR"
        - "WARNING"
        - "INFO"
        - "DEBUG"
      x-enum-descriptions:
        - "Fatal error"
        - "Error"
        - "Warning"
        - "Info"
        - "Debug"

    PerDocumentConfig:
      title: "PerDocumentConfig"
      type: object
      properties:
        docID:
          description: "Specific template IDs, for which apply current custom configuration"
          type: array
          items:
            type: integer
        excludeAuthChecks:
          description: "Contains items from AuthenticityResultType as sum via OR operation"
          type: integer
          example: 2

    ImageQA:
      title: "ImageQA"
      type: object
      properties:
        brightnessThreshold:
          description: "Set the threshold for an actual document brightness below which the check fails"
          type: number
          format: double
        dpiThreshold:
          description: "This parameter sets threshold for Image QA check of the presented document physical dpi. If
          actual document dpi is below this threshold, check will fail."
          type: integer
          # default: 150
        angleThreshold:
          description: "This parameter sets threshold for Image QA check of the presented document perspective angle in
          degrees. If actual document perspective angle is above this threshold, check will fail."
          type: integer
          # default: 5
        focusCheck:
          description: "This option enables focus check while performing image quality validation."
          type: boolean
          # default: false
        glaresCheck:
          description: "This option enables glares check while performing image quality validation."
          type: boolean
          # default: true
        colornessCheck:
          description: "This option enables colorness check while performing image quality validation."
          type: boolean
          # default: false
        moireCheck:
          description: "This option enables screen capture (moire patterns) check while performing image quality validation."
          type: boolean
        documentPositionIndent:
          description: "This parameter specifies the necessary margin. Default 0."
          type: integer
          # default: 0
        expectedPass:
          description: "This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process."
          type: array
          items:
            $ref: "./rt-image-quality.yml#/components/schemas/InputImageQualityChecks"

    ProcessRequestImage:
      title: "ProcessRequestImage"
      type: object
      properties:
        ImageData:
          $ref: "./common.yml#/components/schemas/ImageData"
        light:
          $ref: "./common.yml#/components/schemas/Light"
        page_idx:
          description: "page/image number"
          type: integer
          # default: 0
      example:
        light: 6
        page_idx: 0
        ImageData:
          image: "<base64 image>"

    ProcessSystemInfo:
      title: "ProcessSystemInfo"
      type: object
      properties:
        license:
          description: "Base64 encoded license file"
          type: string
        recaptcha_token:
          description: "For internal use. Demo-sites recaptcha token."
          type: string

    #############################
    ############################# Response objects
    ProcessResponse:
      title: "ProcessResponse"
      type: object
      required:
        - ChipPage
        - ProcessingFinished
        - ContainerList
        - TransactionInfo
        - morePagesAvailable
        - elapsedTime
      properties:
        ChipPage:
          $ref: "./common.yml#/components/schemas/RfidLocation"
        CoreLibResultCode:
          type: integer
        ProcessingFinished:
          $ref: "#/components/schemas/ProcessingStatus"
        ContainerList:
          $ref: "./rt.yml#/components/schemas/ContainerList"
        TransactionInfo:
          $ref: "#/components/schemas/TransactionInfo"
        log:
          description: "Base64 encoded transaction processing log"
          type: string
        passBackObject:
          type: object
          description: "Free-form object provided in request. See passBackObject property of ProcessRequest."
          additionalProperties: true
        morePagesAvailable:
          type: integer
        elapsedTime:
          type: integer
          description: "Time the document processing has taken, ms."
        metadata:
          type: object
          additionalProperties: true

    ProcessingStatus:
      title: "ProcessingStatus"
      type: integer
      enum:
        - 0
        - 1
        - 2
      x-enum-descriptions:
        - "Processing was not finished"
        - "Processing finished"
        - "Processing finished by timeout"
      x-enum-varnames:
        - "NOT_FINISHED"
        - "FINISHED"
        - "TIMEOUT"

    TransactionInfo:
      title: "TransactionInfo"
      type: object
      properties:
        ComputerName:
          description: "Computer name"
          type: string
        DateTime:
          description: "Date and time"
          type: string
        DocumentsDatabase:
          $ref: "#/components/schemas/DocumentsDatabase"
        SystemInfo:
          description: "System information"
          type: string
        Tag:
          description: "Transaction tag"
          type: string
        TransactionID:
          description: "Transaction identifier"
          type: string
        UserName:
          description: "User name"
          type: string
        Version:
          description: "SDK version"
          type: string
      example:
        "ComputerName": "7cded6852d20"
        "DateTime": "2020-05-27T08:17:03.247Z"
        "TransactionID": "dc5eb444-ad6e-4ebc-8102-d62d5bb56a4e"
        "UserName": "user"

    DocumentsDatabase:
      title: "DocumentsDatabase"
      type: object
      description: "Document database information"
      properties:
        Description:
          description: "Document database description"
          type: string
        ExportDate:
          description: "Date the document database was created"
          type: string
        ID:
          description: "Document database identifier"
          type: string
        Version:
          description: "Document database version"
          type: string
