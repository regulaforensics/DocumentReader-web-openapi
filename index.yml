openapi: 3.0.3
info:
  version: 5.1.0
  title: Regula Document Reader Web API
  description: Regula Document Reader Web API

servers:
  - url: http://localhost:8080/
    description: Local on-premise installation
  - url: https://api.regulaforensics.com/
    description: Regula document reader SaaS
  - url: https://test-api.regulaforensics.com/
    description: Regula document reader test SaaS


paths:
  "/api/process":
    post:
      summary: Process list of documents images and return extracted data
      operationId: api-process
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessRequest"
        required: true
      responses:
        "200":
          description: "Document reading result"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: "Bad request. Check your input data. Currently do not return hints"
        "403":
          description: "Bad license. Either server or request contains not-valid license"

components:
  schemas:

    #############################
    ############################# Requests objects

    # todo different image input types
    ProcessRequest:
      type: object
      properties:
        processParam:
          $ref: '#/components/schemas/ProcessParams'
        List:
          type: array
          items:
            $ref: '#/components/schemas/ProcessRequestImage'
        systemInfo:
          $ref: '#/components/schemas/ProcessSystemInfo'
      required:
        - processParam
        - List

    ProcessParams:
      type: object
      properties:
        scenario:
          $ref: './common.yml#/components/schemas/Scenario'
        resultTypeOutput:
          description: "Types of results to return in response. See 'Result' enum for available options"
          type: array
          items:
            $ref: './rt.yml#/components/schemas/Result'
        doublePageSpread:
          description: "This option can be set to true if the image you provide contains double page spread
          of the passport and you want to process both pages in one go. It makes sense to use it for documents
          that have meaningful information on both pages, like Russian domestic passport,  or some others"
          type: boolean
        multipageProcessing:
          # todo а какой ответ вернется если true и нужно 2 раз вызвать?
          description: "???"
          type: boolean
        fieldTypesFilter:
          description: "List of field types to extract. If empty, all fields will be extracted"
          type: array
          items:
             $ref: './e-text-field-type.yml#/components/schemas/TextFieldType'
        documentIdList:
          description: "List of the document types to process. If empty, documents of all types will be processed"
          type: array
          items:
            type: integer
        dateFormat:
          description: "This option allows you to set dates format so that solution will return dates in this format.
          For example, if you supply 'MM/DD/YYYY', and document have printed date
          '09 JUL 2020' for the date os issue, you will get '07/09/2020' as a result.
          By default it is set to system locale default (where the service is running)"
          type: string
          example: "MM/dd/yyyy"
        disableFocusingCheck:
          description: "This option applies only to mobile SDK use case,
          in service single image processing mode it is not active"
          type: boolean
        imageDpiOutMax:
          description: "This option controls max dpi of input images"
          type: integer
        alreadyCropped:
          description: "This option can be set to true if you know for sure that the image you provide contains
          already cropped document by its edges. this was designed to process on the
          server side images captured and cropped on mobile"
          type: boolean
        log:
          # todo а их сейчас в ответе как-то можно получить или просто на сервере будут логи сохраняться?
          description: "???"
          type: boolean
        faceMetadata:
          # todo а как вообще это работает? тут координаты в картине до нормализации?
          description: "???"
          type: array
          items:
            $ref: '#/components/schemas/InputFaceMetadata'
        imageInputParam:
          $ref: '#/components/schemas/InputImageParams'
        recpassParam:
          $ref: '#/components/schemas/InputRecpassParam'
        customParams:
          type: object
          additionalProperties: true
      required:
        - scenario

    # todo добавить описания
    # todo height & width должны быть float или все-таки int?
    InputImageParams:
      description: "???"
      type: object
      required: ['type', 'frameBottom', 'frameLeft', 'frameRight', 'frameTop', 'height', 'width']
      properties:
        type:
          description: "???"
          type: integer
        frameBottom:
          description: "???"
          type: integer
        frameLeft:
          description: "???"
          type: integer
        frameRight:
          description: "???"
          type: integer
        frameTop:
          description: "???"
          type: integer
        height:
          description: "???"
          type: number
        width:
          description: "???"
          type: number

    # todo добавить описания
    InputFaceMetadata:
      type: object
      required: ['ID', 'rollAngle', 'bounds']
      properties:
        ID:
          description: "???"
          type: integer
        rollAngle:
          description: "???"
          type: integer
        bounds:
          description: "???"
          type: object
          required: ['height', 'width', 'x', 'y']
          properties:
            height:
              description: "???"
              type: integer
            width:
              description: "???"
              type: integer
            x:
              description: "???"
              type: integer
            y:
              description: "???"
              type: integer

    # todo добавить описания
    InputRecpassParam:
      description: "???"
      type: object
      required: ['docIdFilter']
      properties:
        docIdFilter:
          description: "???"
          type: string

    ProcessRequestImage:
      type: object
      required:
        - ImageData
      properties:
        ImageData:
          $ref: './common.yml#/components/schemas/ImageData'
        LightIndex:
          $ref: './common.yml#/components/schemas/Light'
        page_idx:
          description: "page/image number"
          type: integer
          default: 0
      example:
        LightIndex: 6
        page_idx: 0
        ImageData:
          image: "<base64 image>"

    ProcessSystemInfo:
      type: object
      properties:
        license:
          description: "Base64 encoded license file"
          type: string
        recaptcha_token:
          description: "For internal use. Demo-sites recaptcha token."
          type: string

    #############################
    ############################# Response objects
    ProcessResponse:
      type: object
      required:
        - ProcessingFinished
        - ContainerList
        - TransactionInfo
        - ChipPage
      properties:
        ChipPage:
          $ref: "#/components/schemas/RfidLocation"
        ProcessingFinished:
          $ref: "#/components/schemas/ProcessingStatus"
        ContainerList:
          $ref: "./rt.yml#/components/schemas/ContainerList"
        TransactionInfo:
          $ref: "#/components/schemas/TransactionInfo"

    ProcessingStatus:
      type: integer
      enum:
        - 0
        - 1
        - 2
      x-enum-descriptions:
        - 'Processing was not finished'
        - 'Processing finished'
        - 'Processing finished by timeout'
      x-enum-varnames:
        - 'NOT_FINISHED'
        - 'FINISHED'
        - 'TIMEOUT'

    TransactionInfo:
      type: object
      properties:
        ComputerName:
          type: string
        DateTime:
          type: string
        TransactionID:
          type: string
        UserName:
          type: string
      example:
        ComputerName: "7cded6852d20"
        "DateTime": "2020-05-27T08:17:03.247Z"
        "TransactionID": "dc5eb444-ad6e-4ebc-8102-d62d5bb56a4e"
        "UserName": "user"
